package ejercicio3;

import ejercicio2.Queue;
import ejercicio2.QueueLink;

class PriorityQueueLinked<E> implements PriorityQueue<E, Integer> {
    private Queue<E>[] priorities;
    private int maxPriority;

    @SuppressWarnings("unchecked")
    public PriorityQueueLinked(int maxPriority) {
        this.maxPriority = maxPriority;
        priorities = new Queue[maxPriority];
        for (int i = 0; i < maxPriority; i++) {
            priorities[i] = new QueueLink<>();
        }
    }

    @Override
    public void enqueue(E x, Integer pr) {
        if (pr < 0 || pr >= maxPriority) {
            throw new IllegalArgumentException("Prioridad fuera de rango.");
        }
        priorities[pr].enqueue(x);
    }

    @Override
    public E dequeue() throws ExceptionIsEmpty {
        for (int i = maxPriority - 1; i >= 0; i--) {
            if (!priorities[i].isEmpty()) {
                return priorities[i].dequeue();
            }
        }
        throw new ExceptionIsEmpty("La cola está vacía.");
    }

    @Override
    public E front() throws ExceptionIsEmpty {
        for (int i = maxPriority - 1; i >= 0; i--) {
            if (!priorities[i].isEmpty()) {
                return priorities[i].front();
            }
        }
        throw new ExceptionIsEmpty("La cola está vacía.");
    }

    @Override
    public E back() throws ExceptionIsEmpty {
        for (int i = 0; i < maxPriority; i++) {
            if (!priorities[i].isEmpty()) {
                return priorities[i].back();
            }
        }
        throw new ExceptionIsEmpty("La cola está vacía.");
    }

    @Override
    public boolean isEmpty() {
        for (Queue<E> queue : priorities) {
            if (!queue.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Cola de prioridad por niveles:\n");
        for (int i = maxPriority - 1; i >= 0; i--) {
            sb.append("Prioridad ").append(i).append(": ").append(priorities[i].toString()).append("\n");
        }
        return sb.toString();
    }
}
