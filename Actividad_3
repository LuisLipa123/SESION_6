import java.util.Scanner;

// Interfaz PriorityQueue
interface PriorityQueue<E, N extends Comparable<N>> {
    void enqueue(E x, N pr);
    E dequeue() throws ExceptionIsEmpty;
    E front() throws ExceptionIsEmpty;
    E back() throws ExceptionIsEmpty;
    boolean isEmpty();
}

// Excepción personalizada
class ExceptionIsEmpty extends Exception {
    public ExceptionIsEmpty(String message) {
        super(message);
    }
}

// Clase Node
class Node<E> {
    private E data;
    private Node<E> next;

    public Node(E data) {
        this.data = data;
        this.next = null;
    }

    public E getData() {
        return data;
    }

    public Node<E> getNext() {
        return next;
    }

    public void setNext(Node<E> next) {
        this.next = next;
    }
}

// Implementación de cola de prioridad
class PriorityQueueLinkSort<E, N extends Comparable<N>> implements PriorityQueue<E, N> {

    // Clase interna para almacenar dato y prioridad
    class EntryNode {
        E data;
        N priority;

        EntryNode(E data, N priority) {
            this.data = data;
            this.priority = priority;
        }

        public String toString() {
            return data + " (" + priority + ")";
        }
    }

    private Node<EntryNode> first;
    private Node<EntryNode> last;

    public PriorityQueueLinkSort() {
        this.first = null;
        this.last = null;
    }

    public void enqueue(E x, N pr) {
        EntryNode entry = new EntryNode(x, pr);
        Node<EntryNode> newNode = new Node<>(entry);

        if (isEmpty()) {
            first = last = newNode;
            return;
        }

        if (entry.priority.compareTo(first.getData().priority) > 0) {
            newNode.setNext(first);
            first = newNode;
            return;
        }

        Node<EntryNode> current = first;
        while (current.getNext() != null &&
                entry.priority.compareTo(current.getNext().getData().priority) <= 0) {
            current = current.getNext();
        }

        newNode.setNext(current.getNext());
        current.setNext(newNode);

        if (newNode.getNext() == null) {
            last = newNode;
        }
    }

    public E dequeue() throws ExceptionIsEmpty {
        if (isEmpty()) {
            throw new ExceptionIsEmpty("Cannot remove from an empty queue");
        }
        E aux = this.first.getData().data;
        this.first = this.first.getNext();
        if (this.first == null) {
            this.last = null;
        }
        return aux;
    }

    public E front() throws ExceptionIsEmpty {
        if (isEmpty()) {
            throw new ExceptionIsEmpty("Cola vacía");
        }
        return first.getData().data;
    }

    public E back() throws ExceptionIsEmpty {
        if (isEmpty()) {
            throw new ExceptionIsEmpty("Cola vacía");
        }
        return last.getData().data;
    }

    public boolean isEmpty() {
        return first == null;
    }

    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Cola de prioridad: [");
        Node<EntryNode> current = first;
        while (current != null) {
            sb.append(current.getData());
            current = current.getNext();
            if (current != null) sb.append(", ");
        }
        sb.append("]");
        return sb.toString();
    }
}

// Clase de prueba
public class Actividad3 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        try {
            PriorityQueue<String, Integer> cola = new PriorityQueueLinkSort<>();

            System.out.print(" Cuantas tareas desea encolar? ");
            int numTareas = scanner.nextInt();
            scanner.nextLine(); // limpiar el buffer del scanner

            for (int i = 0; i < numTareas; i++) {
                System.out.print("Ingrese la descripcion de la tarea #" + (i + 1) + ": ");
                String tarea = scanner.nextLine();

                System.out.print("Ingrese la prioridad de la tarea (numero entero): ");
                int prioridad = scanner.nextInt();
                scanner.nextLine(); // limpiar el buffer del scanner

                cola.enqueue(tarea, prioridad);
            }

            System.out.println("\nEstado actual de la cola:");
            System.out.println(cola);

            if (!cola.isEmpty()) {
                System.out.println("Frente: " + cola.front());
                System.out.println("Final: " + cola.back());
                System.out.println("Quitando: " + cola.dequeue());
                System.out.println(cola);
            }

        } catch (ExceptionIsEmpty e) {
            System.out.println("Error: " + e.getMessage());
        }

        scanner.close();
    }
}
